SCRIPTS DE CRIAÇÃO DE TABELAS:

/* TABELA PRODUTOS */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`produtos` (
        `id` BIGINT(20) NOT NULL,
        `status` CHAR(1) NOT NULL DEFAULT 'A',
        `descricao` VARCHAR(200) NOT NULL,
        `estoque_min` INT(11) NOT NULL,
        `estoque_max` INT(11) NOT NULL,
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

        /* TABELA ENTRADA PRODUTOS */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`entrada_produtos` (
        `id` BIGINT(20) NOT NULL,
        `id_produto` BIGINT(20) NULL DEFAULT NULL,
        `id_fornecedor` BIGINT(20) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        `data_entrada` DATE NULL DEFAULT NULL,
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

    /* TABELA ESTOQUE */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`estoque` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `id_produto` INT(11) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

     /* TABELA SAIDA PRODUTO */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`saida_produto` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `id_produto` INT(11) NULL DEFAULT NULL,
        `id_cliente` INT(11) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `data_saida` DATE NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

        /*  TABELA USUARIOS  */

       CREATE TABLE IF NOT EXISTS `ecommerce`.`usuarios` (
      `id_usuario` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `email` VARCHAR(200) NOT NULL,
      `senha` VARCHAR(250) NOT NULL,
       PRIMARY KEY (`id_usuario`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;


       /* TABELA CLIENTES*/

       CREATE TABLE IF NOT EXISTS `ecommerce`.`clientes` (
      `id_cliente` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `nome` VARCHAR(200) NOT NULL,
      `endereco` VARCHAR(200) NOT NULL,
      `cep` VARCHAR(8) NOT NULL,
      `cidade` VARCHAR(200) NOT NULL,
      `uf` VARCHAR(2) NOT NULL,
      `telefone` INT(12) NOT NULL,
       PRIMARY KEY (`id_cliente`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;

       /* TABELA CLIENTES - PESSOA JURIDICA*/

       CREATE TABLE IF NOT EXISTS `ecommerce`.`clientepj` (
      `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `nome` VARCHAR(200) NOT NULL,
      `endereco` VARCHAR(200) NOT NULL,
      `cep` VARCHAR(8) NOT NULL,
      `cidade` VARCHAR(200) NOT NULL,
      `uf` VARCHAR(2) NOT NULL,
      `telefone` INT(12) NOT NULL,
      `cnpj` VARCHAR(14) NOT NULL,
      `ie` VARCHAR(12) NOT NULL,
      `email` VARCHAR(200) NOT NULL,
       PRIMARY KEY (`id`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;

       
       /*  TABELA FORNECEDORES */
       CREATE TABLE IF NOT EXISTS `ecommerce`.`fornecedores` (
      `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `nome` VARCHAR(200) NOT NULL,
      `endereco` VARCHAR(200) NOT NULL,
      `cep` VARCHAR(8) NOT NULL,
      `cidade` VARCHAR(200) NOT NULL,
      `uf` VARCHAR(2) NOT NULL,
      `telefone` INT(12) NOT NULL,
      `cnpj` VARCHAR(14) NOT NULL,
      `ie` VARCHAR(12) NOT NULL,
      `email` VARCHAR(200) NOT NULL,
       PRIMARY KEY (`id`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;

       /* TABELA GRUPO */

           CREATE TABLE IF NOT EXISTS `ecommerce`.`grupo`(
         `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `grupo` VARCHAR(200) NOT NULL,
          PRIMARY KEY (id))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;

          /*  TABELA MARCA  */

    CREATE TABLE IF NOT EXISTS `ecommerce`.`marca`(
         `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `marca` VARCHAR(200) NOT NULL,
          PRIMARY KEY (id))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;

          /*   TABELA LOCACAO  */

     CREATE TABLE IF NOT EXISTS `ecommerce`.`locacao`(
         `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `locacao` VARCHAR(200) NOT NULL,
          PRIMARY KEY (id))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;

          PROCEDURE “SP_AtualizaEstoque”

Esse procedure recebe três parâmetros (id_prod, qtde_comprada, valor_unit) 
e tem a finalidade de inserir ou debitar produtos na tabela de “ESTOQUE” de 
acordo com o os parâmetros que são passados.        


    DELIMITER //
  CREATE PROCEDURE `SP_AtualizaEstoque`( `id_prod` int, `qtde_comprada` int, valor_unit decimal(9,2))
BEGIN
    declare contador int(11);

    SELECT count(*) into contador FROM estoque WHERE id_produto = id_prod;

    IF contador > 0 THEN
        UPDATE estoque SET qtde=qtde + qtde_comprada, valor_unitario= valor_unit
        WHERE id_produto = id_prod;
    ELSE
        INSERT INTO estoque (id_produto, qtde, valor_unitario) values (id_prod, qtde_comprada, valor_unit);
    END IF;
END //
DELIMITER ;

Vamos agora criar os triggers que serão ativadas sempre que ocorrerem eventos de INSERT, UPDATE e DELETE. Será criado uma trigger para cada evento das tabelas “ENTRADA_PRODUTO” e “SAIDA_PRODUTO” ao todo serão 6 triggers. Infelizmente o MySQL ainda não suporta múltiplos eventos em um mesmo trigger, então teremos um pouquinho de trabalho nessa fase.

    TRG_EntradaProduto_AI;
    TRG_EntradaProduto_AU;
    TRG_EntradaProduto_AD;
    TRG_SaidaProduto_AI;
    TRG_SaidaProduto_AU;
    TRG_SaidaProduto_AD.

Observação: o padrão usado para nomenclatura dos triggers varia conforme o programador, aqui iniciaremos com “TRG”, abreviação de Trigger + nome da + identificação do evento em que será disparado a trigger:

    AI : After Insert (Após Inserção);
    AU: After Update (Após Atualização);
    AD: After Delete (Após Exclusão).

Basicamente cada trigger vai conter apenas uma linha de instrução, que será a chamada de um procedure. Vale lembrar que para criar triggers é importante saber trabalhar com os identificadores “NEW” e “OLD”. Sendo NEW para o novo valor inserido ou atualizado e OLD para o antigo valor, que pode ser antes da atualização e após a exclusão.

Abaixo segue uma breve descrição e Script para cada trigger.



/ * TRIGGER “TRG_EntradaProduto_AI” * /
Esse trigger será disparado após a inserção de um registro na tabela de “ENTRADA_PRODUTO”:
Listagem 6: Script de criação do trigger TRG_EntradaProduto_AI

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AI` AFTER INSERT ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde, new.valor_unitario);
END //
DELIMITER ;



 /* TRIGGER “TRG_EntradaProduto_AU” */

Esse trigger será disparado após a atualização de um registro na tabela de 
“ENTRADA_PRODUTO ”.

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AU` AFTER UPDATE ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde - old.qtde, new.valor_unitario);
END //
DELIMITER ;



 /* TRIGGER “TRG_EntradaProduto_AD” */

Esse trigger será disparado após a exclusão de um registro na tabela de 
“ENTRADA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AD` AFTER DELETE ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde * -1, old.valor_unitario);
END //
DELIMITER ;



/* TRIGGER “TRG_SaidaProduto_AI” */

Esse trigger será disparado após a inserção de um registro na tabela de 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AI` AFTER INSERT ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde * -1, new.valor_unitario);
END //
DELIMITER ;



/* TRIGGER “TRG_ SaidaProduto _AU” */

Esse trigger será disparado após a atualização de um registro na tabela 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AU` AFTER UPDATE ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, old.qtde - new.qtde, new.valor_unitario);
END //
DELIMITER ;



/* TRIGGER “TRG_ SaidaProduto _AD” */

Esse trigger será disparado após a exclusão de um registro na tabela de 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AD` AFTER DELETE ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde, old.valor_unitario);
END //
DELIMITER ;