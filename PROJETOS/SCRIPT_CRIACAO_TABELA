Creating a new database using mysql program

To create a new database via the mysql program, you use the following steps:

First, log in to the MySQL Server using the root user

>mysql -u root -p
Enter password: ********


Next, to display the existing database in the server to make sure that you are not creating a new database that already exists, you use the SHOW DATABASES command as follows:

mysql> SHOW DATABASES;

+--------------------+
| Database           |
+--------------------+
| classicmodels      |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+

Then, issue the CREATE DATABASE command with the database e.g., testdb and press Enter:

mysql> CREATE DATABASE testdb;
Query OK, 1 row affected (0.12 sec)


mysql> SHOW CREATE DATABASE testdb;

mysql> USE testdb;
Database changed


		

CREATE TABLE IF NOT EXISTS products (id BIGINT(20) UNSIGNED AUTO_INCREMENT, 
description VARCHAR(255) NOT NULL, 
price DECIMAL(10,2) NOT NULL, 
quantity INT(11) NOT NULL, 
status ENUM('0','1') NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(id)) ENGINE=INNODB;

2) MySQL CREATE TABLE with a foreign key primary key example

Suppose each task has a checklist or to-do list. To store checklists of tasks, you can create a new table named checklists as follows:

CREATE TABLE IF NOT EXISTS checklists (
    todo_id INT AUTO_INCREMENT,
    task_id INT,
    todo VARCHAR(255) NOT NULL,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY (todo_id , task_id),
    FOREIGN KEY (task_id)
        REFERENCES tasks (task_id)
        ON UPDATE RESTRICT ON DELETE CASCADE
);

'mydb'.'employees'
CREATE TABLE IF NOT EXISTS employeeSystem (id BIGINT(20) UNSIGNED AUTO_INCREMENT, 
name VARCHAR(255) NOT NULL, 
age INT NOT NULL DEFAULT '0', 
country VARCHAR(255) NOT NULL DEFAULT 'BRASIL',
position VARCHAR(255) NOT NULL,
wage DECIMAL(10,2) NOT NULL, 
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(id)) ENGINE=INNODB;

*** PROBLEMAS COM ACESSO AO BANCO/TABELA: 

Erro "ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client"

SOLUÇÃO: 
EXECUTAR NO PROMPT DO mysql>
ALTER USER 'admin'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mbf190377';

19/03/2021

CURSO CRUD Tutorial - REACTJS+NODEJS+MYSQL: https://www.youtube.com/watch?v=3YrOOia3-mo

CREATE TABLE IF NOT EXISTS movie_reviews( id BIGINT(20) UNSIGNED AUTO_INCREMENT,
moviename VARCHAR(200) NOT NULL,
moviereview TEXT(500) NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (id)) ENGINNE=INNODB;


docker run --marcelo mydb-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:tag

  CREATE SCHEMA IF NOT EXISTS `ecommerce` DEFAULT CHARACTER utf8;
  
   CREATE TABLE IF NOT EXISTS `ecommerce`.`produtos` (
      `id_produto` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `nome` VARCHAR(200) NOT NULL,
      `preco` FLOAT(20) NOT NULL,
       PRIMARY KEY (`id_produto`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;

       /* TABELA CLIENTES*/

       CREATE TABLE IF NOT EXISTS `ecommerce`.`clientes` (
      `id_cliente` BIGINT(20) NOT NULL AUTO_INCREMENT,
      `nome` VARCHAR(200) NOT NULL,
      `endereco` VARCHAR(200) NOT NULL,
      `cep` INT(8) NOT NULL,
      `cidade` VARCHAR(200) NOT NULL,
      `uf` VARCHAR(2) NOT NULL,
      `telefone` INT(12) NOT NULL,
       PRIMARY KEY (`id_cliente`))
       ENGINE=InnoDB
       DEFAULT CHARACTER SET = utf8;

CREATE TABLE IF NOT EXISTS `ecommerce`.`pedidos` (
    ->     `id_pedido` BIGINT(20) NOT NULL AUTO_INCREMENT,
    ->     `id_produto` BIGINT(20) NOT NULL,
    ->     `quantidade` SMALLINT(8) NOT NULL,
    ->      PRIMARY KEY (`id_pedido`),
    ->      INDEX `fk_pedidos_produtos_idx` (`id_produto` ASC),
    ->      CONSTRAINT `fk_pedidos_produtos`
    ->      FOREIGN KEY (`id_produto`)
    ->      REFERENCES `ecommerce`.`produtos` (`id_produto`)
    ->      ON DELETE NO ACTION
    ->      ON UPDATE NO ACTION)
    ->      ENGINE=InnoDB
    ->      DEFAULT CHARACTER SET = utf8;

    CREATE TABLE IF NOT EXISTS `ecommerce`.`grupo`(
         `id_grupo` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `nome` VARCHAR(200) NOT NULL,
          PRIMARY KEY (`id_grupo`))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;

    CREATE TABLE IF NOT EXISTS `ecommerce`.`marca`(
         `id_marca` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `nome` VARCHAR(200) NOT NULL,
          PRIMARY KEY (`id_marca`))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;

     CREATE TABLE IF NOT EXISTS `ecommerce`.`locacao`(
         `id_locacao` BIGINT(20) NOT NULL AUTO_INCREMENT,
         `nome` VARCHAR(200) NOT NULL,
          PRIMARY KEY (`id_locacao`))
          ENGINE=InnoDB
          DEFAULT CHARACTER SET = utf8;            

INSERT NAS TABELAS:

INSERT INTO marca VALUES
(1,'CLOCK'),
(2,'EMPRESS'),
(3,'ERILAR'),
(4,'FULGOR'),
(5,'GLOBO'),
(6,'LARES'),
(7,'MARMICOC'),
(8,'NIGRO'),
(9,'ROCHEDO'),
(10,'PANEX'),
(11,'PENEDO'),
(12,'TRAMONTINA');


INSERT INTO `ecommerce`.`marca` VALUES
(13,'DAKO'),
(14,'BRASTEMP'),
(15,'ARNO'),
(16,'PHILCO'),
(17,'BRITANIA'),
(18,'GEN PANELA'),
(19,'GEN FOGAO'),
(20,'GEN MOVEIS'),
(21,'GEN FERRAGENS'),
(22,'GEN UTIL DOMEST');


UPDATE `ecommerce`.`marca` SET
(1,'CLOCK'),
(2,'EMPRESS'),
(3,'ERILAR'),
(4,'FULGOR'),
(5,'GLOBO'),
(6,'LARES'),
(7,'MARMICOC'),
(8,'NIGRO'),
(9,'ROCHEDO'),
(10,'PANEX'),
(11,'PENEDO'),
(12,'TRAMONTINA'),
(13,'DAKO'),
(14,'BRASTEMP'),
(15,'ARNO'),
(16,'PHILCO'),
(17,'BRITANIA'),
(18,'GEN PANELA'),
(19,'GEN FOGAO'),
(20,'GEN MOVEIS'),
(21,'GEN FERRAGENS'),
(22,'GEN UTIL DOMEST');

1 CLOCK
2 EMPRESS
3 ERILAR
4 FULGOR
5 GLOBO
6 LARES
7 MARMICOC
8 NIGRO
9 ROCHEDO
10 PANEX
11 PENEDO
12 TRAMONTINA
13 DAKO
14 BRASTEMP
15 ARNO
16 PHILCO
17 BRITANIA
18 GEN PANELA
19 GEN FOGAO
20 GEN MOVEIS
21 GEN FERRAGENS
22 GEN UTIL DOMEST


INSERT INTO grupo VALUES
(1,'PANELA'),
(2,'FOGAO');

INSERT INTO `ecommerce`.`grupo` VALUES
(3,'MOVEIS'),
(4,'FERRAGENS'),
(5,'UTIL DOMESTICAS');
                  
            


INSERT INTO locacao VALUES
(1,'A001'),
(2,'A002'),
(3,'A003'),
(4,'A004'),
(5,'A005'),
(6,'A006'),
(7,'A007'),
(8,'A008'),
(9,'A009'),
(10,'A010'),
(11,'A011'),
(12,'A012'),
(13,'A013'),
(14,'A014'),
(15,'A015');

UPDATE `ecommerce`.`marca` VALUES
(1,'CLOCK'),
(2,'EMPRESS'),
(3,'ERILAR'),
(4,'FULGOR'),
(5,'GLOBO'),
(6,'LARES'),
(7,'MARMICOC'),
(8,'NIGRO'),
(9,'ROCHEDO'),
(10,'PANEX'),
(11,'PENEDO'),
(12,'TRAMONTINA');


/* PREENCHENDO TODOS OS CAMPOS DA COLUNA COM UM VALOR ESPECÍFICO*/
UPDATE `ecommerce`.`produtos` SET `id_grupo` = 1;






INSERT INTO grupo VALUES
(1, 1,'PANELA');

UPDATE `ecommerce`.`produtos` SET `id_grupo`=1;

/* TABELA PRODUTOS */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`produtos` (
        `id` BIGINT(20) NOT NULL,
        `status` CHAR(1) NOT NULL DEFAULT 'A',
        `descricao` VARCHAR(200) NOT NULL,
        `estoque_min` INT(11) NOT NULL,
        `estoque_max` INT(11) NOT NULL,
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

        /* TABELA ENTRADA PRODUTOS */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`entrada_produtos` (
        `id` BIGINT(20) NOT NULL,
        `id_produto` BIGINT(20) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        `data_entrada` DATE NULL DEFAULT NULL,
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

    /* TABELA ESTOQUE */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`estoque` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `id_produto` INT(11) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8;

     /* TABELA SAIDA PRODUTO */
    CREATE TABLE IF NOT EXISTS `ecommerce`.`saida_produto` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `id_produto` INT(11) NULL DEFAULT NULL,
        `qtde` INT(11) NULL DEFAULT NULL,
        `data_saida` DATE NULL DEFAULT NULL,
        `valor_unitario` DECIMAL(9,2) NULL DEFAULT '0.00',
        PRIMARY KEY (`id`))
        ENGINE=InnoDB
        DEFAULT CHARACTER SET = utf8; 
        
PROCEDURE “SP_AtualizaEstoque”

Esse procedure recebe três parâmetros (id_prod, qtde_comprada, valor_unit) 
e tem a finalidade de inserir ou debitar produtos na tabela de “ESTOQUE” de 
acordo com o os parâmetros que são passados.        


    DELIMITER //
  CREATE PROCEDURE `SP_AtualizaEstoque`( `id_prod` int, `qtde_comprada` int, valor_unit decimal(9,2))
BEGIN
    declare contador int(11);

    SELECT count(*) into contador FROM estoque WHERE id_produto = id_prod;

    IF contador > 0 THEN
        UPDATE estoque SET qtde=qtde + qtde_comprada, valor_unitario= valor_unit
        WHERE id_produto = id_prod;
    ELSE
        INSERT INTO estoque (id_produto, qtde, valor_unitario) values (id_prod, qtde_comprada, valor_unit);
    END IF;
END //
DELIMITER ;

Vamos agora criar os triggers que serão ativadas sempre que ocorrerem eventos de INSERT, UPDATE e DELETE. Será criado uma trigger para cada evento das tabelas “ENTRADA_PRODUTO” e “SAIDA_PRODUTO” ao todo serão 6 triggers. Infelizmente o MySQL ainda não suporta múltiplos eventos em um mesmo trigger, então teremos um pouquinho de trabalho nessa fase.

    TRG_EntradaProduto_AI;
    TRG_EntradaProduto_AU;
    TRG_EntradaProduto_AD;
    TRG_SaidaProduto_AI;
    TRG_SaidaProduto_AU;
    TRG_SaidaProduto_AD.

Observação: o padrão usado para nomenclatura dos triggers varia conforme o programador, aqui iniciaremos com “TRG”, abreviação de Trigger + nome da + identificação do evento em que será disparado a trigger:

    AI : After Insert (Após Inserção);
    AU: After Update (Após Atualização);
    AD: After Delete (Após Exclusão).

Basicamente cada trigger vai conter apenas uma linha de instrução, que será a chamada de um procedure. Vale lembrar que para criar triggers é importante saber trabalhar com os identificadores “NEW” e “OLD”. Sendo NEW para o novo valor inserido ou atualizado e OLD para o antigo valor, que pode ser antes da atualização e após a exclusão.

Abaixo segue uma breve descrição e Script para cada trigger.

/ * TRIGGER “TRG_EntradaProduto_AI” * /
Esse trigger será disparado após a inserção de um registro na tabela de “ENTRADA_PRODUTO”:
Listagem 6: Script de criação do trigger TRG_EntradaProduto_AI

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AI` AFTER INSERT ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde, new.valor_unitario);
END //
DELIMITER ;

 /* TRIGGER “TRG_EntradaProduto_AU” */

Esse trigger será disparado após a atualização de um registro na tabela de 
“ENTRADA_PRODUTO ”.

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AU` AFTER UPDATE ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde - old.qtde, new.valor_unitario);
END //
DELIMITER ;

 /* TRIGGER “TRG_EntradaProduto_AD” */

Esse trigger será disparado após a exclusão de um registro na tabela de 
“ENTRADA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AD` AFTER DELETE ON `entrada_produtos`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde * -1, old.valor_unitario);
END //
DELIMITER ;

/* TRIGGER “TRG_SaidaProduto_AI” */

Esse trigger será disparado após a inserção de um registro na tabela de 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AI` AFTER INSERT ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde * -1, new.valor_unitario);
END //
DELIMITER ;

/* TRIGGER “TRG_ SaidaProduto _AU” */

Esse trigger será disparado após a atualização de um registro na tabela 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AU` AFTER UPDATE ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, old.qtde - new.qtde, new.valor_unitario);
END //
DELIMITER ;

/* TRIGGER “TRG_ SaidaProduto _AD” */

Esse trigger será disparado após a exclusão de um registro na tabela de 
“SAIDA_PRODUTO”.

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AD` AFTER DELETE ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde, old.valor_unitario);
END //
DELIMITER ;

29/06/2021 - MUDANÇAS NO BANCO ecommerce:

mysql> SHOW TABLES;
+---------------------+
| Tables_in_ecommerce |
+---------------------+
| clientes            |
| entrada_produtos    |
| produtos            |
| saida_produto       |
+---------------------+

clientes:

mysql> DESC clientes;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| id_cliente | bigint(20)   | NO   | PRI | NULL    | auto_increment |
| nome       | varchar(200) | NO   |     | NULL    |                |
| endereco   | varchar(200) | NO   |     | NULL    |                |
| cep        | int(8)       | NO   |     | NULL    |                |
| cidade     | varchar(200) | NO   |     | NULL    |                |
| uf         | varchar(2)   | NO   |     | NULL    |                |
| telefone   | int(12)      | NO   |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+


entrada_produtos:

mysql> DESC entrada_produtos;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| id             | bigint(20)   | NO   | PRI | NULL    |       |
| id_produto     | bigint(20)   | YES  |     | NULL    |       |
| qtde           | int(11)      | YES  |     | NULL    |       |
| valor_unitario | decimal(9,2) | YES  |     | 0.00    |       |
| data_entrada   | date         | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+

produtos:

mysql> DESC produtos;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| id          | bigint(20)   | NO   | PRI | NULL    |       |
| status      | char(1)      | NO   |     | A       |       |
| descricao   | varchar(200) | NO   |     | NULL    |       |
| estoque_min | int(11)      | NO   |     | NULL    |       |
| estoque_max | int(11)      | NO   |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+

saida_produto:

mysql> DESC saida_produto;
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| id             | int(11)      | NO   | PRI | NULL    | auto_increment |
| id_produto     | int(11)      | YES  |     | NULL    |                |
| qtde           | int(11)      | YES  |     | NULL    |                |
| data_saida     | date         | YES  |     | NULL    |                |
| valor_unitario | decimal(9,2) | YES  |     | 0.00    |                |
+----------------+--------------+------+-----+---------+----------------+




ADICIONANDO CHAVE ESTRANGEIRA DA TABELA GRUPO:

ALTER TABLE `ecommerce`.`produtos`
ADD INDEX `fk_produtos_grupo_idx` (`id_grupo` ASC),
ADD CONSTRAINT `fk_produtos_grupo`
FOREIGN KEY (`id_grupo`)
REFERENCES `ecommerce`.`grupo` (`id_grupo`) 
ON DELETE CASCADE
ON UPDATE CASCADE;

ALTER TABLE produtos ADD id_locacao BIGINT(20) AFTER id_marca;


ALTER TABLE `ecommerce`.`produtos`
ADD INDEX `fk_produtos_marca_idx` (`id_marca` ASC),
ADD CONSTRAINT `fk_produtos_marca`
FOREIGN KEY (`id_marca`)
REFERENCES `ecommerce`.`marca` (`id_marca`) 
ON DELETE CASCADE
ON UPDATE CASCADE;

ADICIONANDO CHAVE ESTRANGEIRA DA TABELA MARCA:

ALTER TABLE `ecommerce`.`produtos`
ADD INDEX `fk_produtos_locacao_idx` (`id_locacao` ASC),
ADD CONSTRAINT `fk_produtos_locacao`
FOREIGN KEY (`id_locacao`)
REFERENCES `ecommerce`.`locacao` (`id_locacao`)
ON DELETE CASCADE
ON UPDATE CASCADE;

ADICIONANDO CHAVE ESTRANGEIRA DA TABELA LOCACAO:

ALTER TABLE `ecommerce`.`produtos`
ADD CONSTRAINT fk_id_locacao
FOREIGN KEY (id_locacao)
REFERENCES `ecommerce`.`locacao` (id_locacao)
ON DELETE CASCADE
ON UPDATE CASCADE;
















